---
id: cf-1826D
source: CF
title: Running Miles
author: Chongtian Ma
---

[Official Analysis](https://codeforces.com/blog/entry/115892)

## Implementation
**Time Complexity:** $\mathcal{O}(N)$

<LanguageSection>

<CPPSection>

```cpp
#include <bits/stdc++.h>
using namespace std;

int main(){
	int test_num;
	cin >> test_num;
	for (int t = 0; t < test_num; t++) {
		int N;
		cin >> N;
		vector<int> A(N);
		for(int i = 0; i < N; i++) cin >> A[i];

		vector<int> pref_max(N), suff_max(N);
		for(int i = 0; i < N; i++){
			pref_max[i] = A[i] + i;
			suff_max[i] = A[i] - i;
		}

		for(int i = 1; i < N; i++){
			pref_max[i] = max(pref_max[i], pref_max[i - 1]);
		}
		for(int i = N - 2; i >= 0; i--){
			suff_max[i] = max(suff_max[i], suff_max[i + 1]);
		}

		int ans = 0;
		for(int i = 1; i < N - 1; i++){
			ans = max(ans, pref_max[i - 1] + A[i] + suff_max[i + 1]);
		}
		cout << ans << "\n";
	}
}
```

</CPPSection>

<PySection>

```py
from sys import stdin, stdout

for _ in range(int(stdin.readline())):
    n = int(stdin.readline())
    a = list(map(int, stdin.readline().split()))

    pref = [0] * n
    suff = [0] * n
    for i in range(n):
        pref[i] = a[i] + i
        suff[i] = a[i] - i

    for i in range(1, n):
        pref[i] = max(pref[i], pref[i - 1])
    for i in range(n-2, -1, -1):
        suff[i] = max(suff[i], suff[i + 1])

    ans = 0
    for i in range(1, n-1):
        ans = max(ans, pref[i - 1] + suff[i + 1] + a[i])
    stdout.write(f'{ans}\n')
```

</PySection>

</LanguageSection>
